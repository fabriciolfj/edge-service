server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  security:
    oauth2:
      #client:
      #  registration:
      #    keycloak:
      #      client-id: edge-service
      #      client-secret: polar-keycloak-secret
      #      scope: openid,roles
      resourceserver:
        jwt:
          #issuer-uri: http://localhost:8080/auth/realms/PolarBookshop
          jwk-set-uri: http://localhost:8080/auth/realms/PolarBookshop/protocol/openid-connect/certs
  application:
    name: edge-service
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  lifecycle:
    timeout-per-shutdown-phase: 15s
  redis:
    connect-timeout: 2s
    host: ${SPRING_REDIS_HOST:localhost}
    port: 6379
    timeout: 1s
  cloud:
    gateway:
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            redis-rate-limiter.requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exeptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              baseOnPreviousValue: false
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  endpoint:
    health:
      show-components: always
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include:
            - readinessState
            - redis
  metrics:
    tags:
      application: ${spring.application.name}